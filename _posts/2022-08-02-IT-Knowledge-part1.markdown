---
title:  "IT 용어"
date:   2022-08-02
categories: [Tech]
tags: [Tech, Web3.0, WAS]
---

## Web 1.0, 2.0, 3.0

### 읽기 전용인 Web 1.0     
- 소수의 사람만 컨텐츠 창작
- 댓글을 남기거나 코맨트를 남기는 등의 상호작용은 불가능
  
### 쓰기 기능이 추가된(상호작용이 가능한) Web 2.0       
- 요즘 말하는 웹이 Web 2.0
- 초창기 모델이 블로그, 다이어리등
- 인스타나 페이스북 등의 SNS 역시 Web 2.0

### 탈중앙화와 AI를 활용한 사용자 맞춤형 Web 3.0
- 서버-클라이언트 구조 탈피 (탈중앙화)      
  -> 사용자들이 생성한 컨텐츠들의 대부분 특정 플랫폼에 속해 있음 (영상의 경우 유투브)       
  이 경우 유투브 서버에 동영상 컨텐츠가 저장되고 사용자(클라이언트)는 해당 서버에서만 데이터를 얻을 수 있음     
  이 같은 구조를 탈피하고자하는게 Web 3.0
- 맞춤형        
  -> 방대한 데이터에서 실제 사용자에게 필요한 정보만을 제공해주기 위함
- Web 3.0은 2D가 아닌 그 이상의 디지털 공간이 될 것이라 예상하는 사람도 많음

<br>

## 웹서버/WAS(Web Application Server)
### 정의: 
클라이언트의 요청을 받아들여 그에 맞는 결과를 전달해주는 프로그램       
웹 서버 : HTTP요청을 받아 HTML, CSS, 자바스크립트, 이미지 등 정적 파일을 제공       
WAS : DB조회나 다양한 로직처리를 필요로하는 동적 콘텐츠 제공
### 대표적인 웹 서버 / WAS:
웹 서버 : Apache, NginX, Microsoft IIS 등
WAS : Tomcat, JBoss, Jeus, Web Sphere 등        
<!--<img src="../images/post/webserver-vs-was.png" width="500px" height="200px" title="Web vs Was">
-->
![Web vs Was](/images/post/webserver-vs-was.png){: width="400" height="200px"}

<br>

## DOM(Document Object Model)
### 정의:   
HTML, XML 문서에 접근하기 위해 웹 브라우저에 내장된 API   
DOM을 사용해서 HTML 문서를 읽어 웹 브라우저에 보여줌    
또한 자바스크립트가 HTML을 조작할 수 있도록 도와주는 역할도 함

<br>

## Virtual DOM
### 정의:   
DOM이 복잡해질수록 최적화와 유지 보수가 어려워짐    
DOM을 조작할 때마다 렌더링되는 과정이 많아지면 브라우저에 과부하가 오기도 쉽고, 자원을 많이 소모하기 때문   
이런 비효율성때문에 Virtual DOM이 탄생    
내용이 변경될 때마다 렌더링하지 않고 변경된 내용만 파악해서 랜더링    
<B>But Virtual DOM을 사용한다고 무조건 빠르진 않고 최적화 필요함</b>

<br>

## 캐시/쿠키/세션
### 정의:   
- 캐시: 이전에 사용했던 데이터들을 보관하는 사용자의 저장공간 (웹 사이트나 앱에서 서비스를 이용할 때 재사용할 수 있는 데이터[이미지, HTML 파일등]를 캐시에 저장)
- 쿠키: 서버가 기억하지 못하는 사용자 정보를 알기 위해 사용자에게 저장하는 작은 문자열 파일 (로그인하지 않아도 담겨진채 저장되는 장바구니, 웹사이트 언어설정 등)
- 세션: 서버에서 사용자에 대한 정보를 기록하고 보관하여 사용자를 관리하는 서버 저장 공간    

<br>

## MVC
### 정의:
MVC(Model - View - Controller)    
- 모델: 앱이 무엇을 할것인지 정의 + 데이터 저장소와 직접 연동하여 데이터를 어떻게 처리할지 결정
- 뷰: 모델로부터 받아온 데이터와 결과값을 UI로 보여주는 역할 / 데이터 로직X, 데이터를 관리하는 클래스, 변수 등도 없어야 함
- 컨트롤러: 모델과 뷰 사이를 연결, 프로그램 작동 순서나 모델에게 데이터를 어떻게 처리할지 지시, 받아온 결과를 뷰에게 전달

<br>

## CORS
### 정의:
CORS(Cross-Origin Resource Sharing, 교차 출처 리소스 공유)    
브라우저에서만 가지고 있는 체제   
웹 페이지 상의 제한된 리소스를 최초 자원이서비스된 도메인 밖의 다른 도메인으로부터 요청할 수 있게 허용하는 구조
쉽게 말해 HTTP 헤더를 사용하여, 한 출처에서 실행 중인 웹 애플리케이션이 다른 출처의 선택한 자원에 접근할 수 있는 권한을 부여하도록 브라우저에 알려주는 체제
### 출처가 다르다고 판단하는 기준:
두 URL 구성 요소 중 Protocol, Host, Port 세 가지가 동일하면 출처가 같다고 판단    

CORS는 브라우저 구현 스펙에 포함되는 정책이기 때문에, 브라우저를 통하지 않고 서버 간 통신을 할ㄷ 때는 정책이 적용되지 않는다.
또한, CORS 정책을 위반하는 리소스 요청 때문에 에러가 발생했다고 해도 서버ㅈ 쪽 로그는 정상적으로 응답을 했다는 로그만 남기 때문에 CORS가 돌아가는 방식을 모르면 에러 추적에 난항을 겪을 수도 있다.

<br>

## SOP
### 정의:
SOP(Same-Origin-Policy, 동일 출처 정책)   
어떤 출처에서 불러온 문서나 스크립트가 다른 출처에서 가져온 리소스와 상호작용하는 것을 제한하는 정책
같은 출처에서만 리소스를 공유할 수 있다.
SOP의 예외 정책으로 CORS가 마련되어 있음

<br>

## SOAP과 REST
### 정의:
온라인 데이터 전송 방식   
웹 애플리케이션 간 데이터 통신을 허용하는 API를 구축하는 방법 정의   
사용자가 자원을 요청하고 서버에서 응답하는 과정에서 정확한 내용을 전달하기 위해 SOAP과 REST 사용
SOAP는 프로토콜이나 REST는 프로토콜이 아님  

| **REST** | **SOAP** |
|:---:|:---:|
|HTTP(하이퍼텍스트 전송 프로토콜 사용) | HTTP,SMTP,TCP 등 사용가능 |
|HTML, XML, 일반 텍스트, JSON 등 메세지 사용가능 | XML 메세지 사용가능 |
| 가볍고 유연함 | 보안성이 좋음 |

<br>

## 프로세스/쓰레드
### 정의:
- 프로세스:  
실행중인 프로그램, 운영체제로부터 자원을 할당받는 작업의 단위
- 쓰레드:  
  할당받은 자원을 이용하는 실행의 단위, 프로세스 내에 여러개 생길 수 있다.
- 멀티 프로세스:  
  하나의 프로그램을 여러개의 프로세스로 구성하여 각 프로세스가 하나의 작업을 처리하는 것  
   장점: 하나의 프로세스가 잘못 되어도 프로그램은 동작 함  
   단점: 컨텍스트 스위칭 비용 발생
- 멀티 쓰레드:  
  프로그램을 여러개의 쓰레드로 구성하고 각 쓰레드가 작업을 처리하는 것  
  장점: 시스템 자원 소모 감소, 처리 비용 감소, 쓰레드간 자원 공유  
  단점: 디버깅 어려움, 동기화 이슈 발생(쓰레드 간), 하나의 쓰레드 오류로 전체 프로세스에 문제 발생

<br>

## 프록시와 게이트웨이
### 정의:
- 프록시: 클라이언트가 다른 네트워크 서비스에 간접적으로 접속 할 수 있게 해주는 컴퓨터 시스템이나 응용 프로그램
  Caching Proxy, Web Proxy, Forward Proxy, Reverse Proxy 등이 있음  
  (**HTTP 프로토콜**)   
  캐싱 프록시: 클라이언트의 요청과 응답을 저장해두었다가 같은 요청이 올 경우 서버로 요청을 보내지 않고, 캐시되어 있는 응답값을 클라이언트에게 전송  
  포워드 프록시: 일반적인 프록시, 클라이언트 요청을 프록시 서버에서 받고, 프록시 서버에서 서비스 서버에 접근함. 따라서 클라이언트의 요청을 서비스 서버에서 알 수 없음  
  리버스 프록시: 클라이언트에서 프록시 서버 정보만알고 프록시 서버에 요청을 하기 때문에, 서비스 서버에대한 정보는 알 수 없음

- 게이트웨이: 프록시와 비슷하게 클라이언트가 다른 네트워크 서비스에 접속 할 수 있도록 해주나, **다른 프로토콜**을 사용할 수 있음

<br>

## 라이브러리/API/프레임워크
### 정의:
- 라이브러리 : 재사용 가능한 코드들의 집합 혹은 API들 묶음, **필요한 함수**만 호출해서 사용가능, 독립성을 가지고 응용프로그램이 **능동적으로 라이브러리 호출**해서 사용
- API: 응용프로그램 사이에서 데이터를 주고받는 방법 혹은 특정 기능을 제어하기 위한 방법, **기능 내부를 알 수 없음**
- 프레임워크: 소프트웨어의 특정 기능에 해당하는 부분의 설계와 구현을 재사용 가능하도록 합쳐 놓은 형태, 보통 클래스와 라이브러리가 합쳐진 구조, **프레임워크가 응용 프로그램을 호출**

